X_psi %*% beta_psi_true + U_true %*% L_true)
theta_true <- logistic(X_theta %*% beta_theta_true)
theta0_true <- rep(0.01, S)
p_true <- matrix(.9, max(L), S)
q_true <- matrix(.02, max(L), S)
z <- matrix(0, n, S)
delta <- matrix(0, N, S)
cimk <- matrix(0, N3, S)
y <- matrix(NA, N3, S)
for (s in 1:S) {
idx_sample <- 1
for (i in 1:n) {
z[i,s] <- rbinom(1, 1, prob = psi_true[i,s])
if(z[i,s] == 1){
for (m in 1:M[i]) {
delta[sumM[i] + m, s] <- rbinom(1, 1, theta_true[sumM[i] + m, s])
}
} else {
for (m in 1:M[i]) {
delta[sumM[i] + m, s] <- rbinom(1, 1, theta0_true[s])
}
}
for (m in 1:M[i]) {
if(delta[sumM[i] + m, s] == 1){
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
cimk[sumL[sumM[i] + m] + l, s] <- rbinom(1, 1, p_true[l, s])
}
}
} else {
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
cimk[sumL[sumM[i] + m] + l, s] <- rbinom(1, 1, q_true[l, s])
}
}
}
}
for (m in 1:M[i]) {
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
if(!(idx_sample %in% idx_nasample)){
if(cimk[sumL[sumM[i] + m] + l, s] == 1){
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
r_f1y(1, lambda1, size = size1)
} else {
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
r_f0y(1, pi0, lambda0, size0 = size0)
}
} else {
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
NA
}
}
}
idx_sample <- idx_sample + 1
}
}
}
OTU <- y
data_info <- data.frame(Site = rep(rep(rep(1:n, M), L), K),
Sample = rep(rep(1:N, L), K),
Primer = rep(1:N2, K),
X_psi = X_psi[rep(rep(rep(1:n, M), L), K),],
X_ord = X_ord[rep(rep(rep(1:n, M), L), K),],
X_theta = X_theta[rep(rep(1:N, L), K),-1])
data <- list(info = data_info,
OTU = OTU)
data_info <- as.data.frame(data$info)
OTU <- data$OTU
# sort the data
{
data_info <- data_info %>%
arrange(Site, Sample, Primer)
}
# samples per site
{
M_df <- data_info %>% group_by(Site, Sample) %>%
slice(1) %>%
group_by(Site) %>%
summarise(M = n())
M <- M_df$M
names(M) <- M_df$Site
n <- length(M)
sumM <- c(0, cumsum(M)[-n])
siteNames <- unique(data_info$Site)
}
devtools::load_all(".")
devtools::load_all(".")
devtools::install()
devtools::load_all(".")
runOccPlusPro
?runOccPlusPro
devtools::document()
?runOccPlusPro
fitmodel  <- runOccPlusPro(data, d = 2)
.onLoad <- function(libname, pkgname) {
# Set mc.cores (but limit to 2 for CRAN compliance)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
library(tidyverse)
}
devtools::load_all(".")
fitmodel  <- runOccPlusPro(data, d = 2)
devtools::load_all(".")
fitmodel  <- runOccPlusPro(data, d = 2)
S
plotCollectionRates(fitmodel,
idx_species = 1:5)
fitmodel$infos$speciesNames
source("~/occPlus/R/output.R", echo=TRUE)
fitmodel$infos$speciesNames
plotCollectionRates(fitmodel,
idx_species = 1:5)
debug(plotCollectionRates)
plotCollectionRates(fitmodel,
idx_species = 1:5)
speciesNames
str(data_plot)
source("~/occPlus/R/output.R", echo=TRUE)
plotCollectionRates(fitmodel,
idx_species = 1:5)
debug(plotCollectionRates)
plotCollectionRates(fitmodel,
idx_species = 1:5)
str(data_plot)
data_plot %>%
filter(Species %in% speciesNames[subset])
matrix_of_draws <- fitmodel$matrix_of_draws
S <- fitmodel$infos$S
ncov_theta <- fitmodel$infos$ncov_theta
speciesNames <- fitmodel$infos$speciesNames
idx_species <- 1:S
param <- "beta_theta"
samples_subset <- matrix_of_draws[,grepl(param, colnames(matrix_of_draws))]
samples_subset <- samples_subset[,1 + 0:(S-1)*ncov_theta]
data_plot <- apply(samples_subset, 2, function(x) {
quantile(logistic(x), probs = c(0.025, 0.975))
}) %>%
t %>%
as.data.frame %>%
mutate(Species = speciesNames) %>%
mutate(speciesOrder = order(`2.5%`))
orderSpecies <- order(data_plot$`2.5%`)
data_plot %>%
filter(Species %in% speciesNames[subset])
speciesNames
data_plot$Species
str(data_plot$Species)
speciesNames
str(speciesNames)
data_plot %>%
filter(Species %in% speciesNames[idx_species])
data_plot <- apply(samples_subset, 2, function(x) {
quantile(logistic(x), probs = c(0.025, 0.975))
}) %>%
t %>%
as.data.frame %>%
mutate(Species = speciesNames) %>%
mutate(speciesOrder = order(`2.5%`)) %>%
filter(Species %in% speciesNames[idx_species])
orderSpecies <- order(data_plot$`2.5%`)
speciesNames[orderSpecies]
data_plot <- apply(samples_subset, 2, function(x) {
quantile(logistic(x), probs = c(0.025, 0.975))
}) %>%
t %>%
as.data.frame %>%
mutate(Species = speciesNames) %>%
mutate(speciesOrder = order(`2.5%`)) %>%
filter(Species %in% speciesNames[idx_species])
orderSpecies <- order(data_plot$`2.5%`)
data_plot %>%
ggplot(aes(x =  factor(Species, level = speciesNames[orderSpecies]),
ymin = `2.5%`,
ymax = `97.5%`)) + geom_errorbar() +
xlab("Species") +
# ylim(c(0,1)) +
ggtitle("Collection rates") +
theme_bw() +
ylim(c(0,1)) +
theme(
axis.text = element_text(angle = 90,
size = 8),
plot.title = element_text(hjust = .5,
size = 15)
)
source("~/occPlus/R/output.R", echo=TRUE)
?plotCollectionRates
devtools::document()
?plotCollectionRates
matrix_of_draws <- fitmodel$matrix_of_draws
S <- fitmodel$infos$S
# ncov_theta <- fitmodel$infos$ncov_psi
speciesNames <- fitmodel$infos$speciesNames
primerNames <- fitmodel$infos$primerNames
if(is.null(idx_species)){
idx_species <- 1:S
}
param <- "p\\["
samples_subset <- matrix_of_draws[,grepl(param, colnames(matrix_of_draws))]
data_plot <- apply(samples_subset, 2, function(x) {
quantile(x, probs = c(0.025, 0.975))
}) %>%
t %>%
as.data.frame
texts <- rownames(data_plot)
idx_speciesprimer <- str_match(texts, "\\[(\\d+),(\\d+)\\]")
data_plot <- data_plot %>%
mutate(Species = as.numeric(idx_speciesprimer[,3]),
Primer = as.numeric(idx_speciesprimer[,2])) %>%
mutate(Species = speciesNames[Species],
Primer = primerNames[Primer]) %>%
mutate(speciesOrder = order(`2.5%`)) %>%
filter(Species %in% speciesNames[idx_species])
orderSpecies <- order(data_plot$`2.5%`[data_plot$Primer == data_plot$Primer[1]])
detectionRates <- data_plot %>%
ggplot(aes(x =  factor(Species, level = speciesNames[orderSpecies]),
ymin = `2.5%`,
ymax = `97.5%`,
color = Primer)) + geom_errorbar() +
xlab("Species") +
# ylim(c(0,1)) +
ggtitle("Detection rates") +
theme_bw() +
# ylim(c(0,1)) +
ylab("p") +
theme(
axis.text = element_text(angle = 90,
size = 8),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = .5,
size = 15)
)
detectionRates
detectionRates
primerNames
str(primerNames)
fitmodel$infos$primerNames
View(data$info)
# param count distr
{
lambda0 <- exp(2.5)
lambda1 <- exp(5)
size0 <- 3
size1 <- 3
pi0 <- .95
}
r_f0y <- function(n, pi0, lambda0, size0){
rbinom(n, size = 1, prob = 1 - pi0) * rnbinom(n, mu = lambda0, size = size0)
}
r_f1y <- function(n, lambda1, size1){
rnbinom(n, size = size1, mu = lambda1)
}
# settings
{
n <- 100
S <- 50
M <- rep(3, n)
N <- sum(M)
L <- rep(1, N)
N2 <- sum(L)
K <- rep(2, N2)
N3 <- sum(K)
sumM <- c(0, cumsum(M)[-n])
sumL <- c(0, cumsum(L)[-N])
sumK <- c(0, cumsum(K)[-N2])
rep(rep(rep(1:n, M), L), K)
ncov_psi <- 0
ncov_theta <- 1
ncov_ord <- 0
X_psi <- matrix(rnorm(n * ncov_psi), n, ncov_psi)
X_theta <- cbind(1, matrix(rnorm(N * (ncov_theta - 1)), N, ncov_theta - 1))
X_ord <- matrix(rnorm(n * ncov_ord), n, ncov_ord)
# na samples
idx_nasample <- sample(1:N, N * .01, replace = T)
}
d <- 5
logistic <- function(x) 1 / (1 + exp(-x))
beta0_psi_true <- rnorm(S, sd = .001)
beta_psi_true <- matrix(sample(c(-1,1), ncov_psi * S, replace = T), ncov_psi, S)
# beta_psi_true <- matrix(rnorm(ncov_psi * S), ncov_psi, S)
# beta_theta_true <- matrix(rnorm(ncov_theta * S), ncov_theta, S)
beta_theta_true <- rbind(1,
matrix(sample(c(-1,1), (ncov_theta - 1) * S, replace = T),
(ncov_theta - 1), S))
beta_ord_true <- matrix(sample(c(-1,1,0), ncov_ord * d, replace = T), ncov_ord, d)
E_true <- matrix(rnorm(n * d, sd = .5), n, d)
U_true <- X_ord %*% beta_ord_true + E_true
L_true <- matrix(rnorm(d * S), d, S)
psi_true <- logistic(matrix(beta0_psi_true, n, S, byrow = T) +
X_psi %*% beta_psi_true + U_true %*% L_true)
theta_true <- logistic(X_theta %*% beta_theta_true)
theta0_true <- rep(0.01, S)
p_true <- matrix(.9, max(L), S)
q_true <- matrix(.02, max(L), S)
z <- matrix(0, n, S)
delta <- matrix(0, N, S)
cimk <- matrix(0, N3, S)
y <- matrix(NA, N3, S)
p_true
z <- matrix(0, n, S)
delta <- matrix(0, N, S)
cimk <- matrix(0, N3, S)
y <- matrix(NA, N3, S)
for (s in 1:S) {
idx_sample <- 1
for (i in 1:n) {
z[i,s] <- rbinom(1, 1, prob = psi_true[i,s])
if(z[i,s] == 1){
for (m in 1:M[i]) {
delta[sumM[i] + m, s] <- rbinom(1, 1, theta_true[sumM[i] + m, s])
}
} else {
for (m in 1:M[i]) {
delta[sumM[i] + m, s] <- rbinom(1, 1, theta0_true[s])
}
}
for (m in 1:M[i]) {
if(delta[sumM[i] + m, s] == 1){
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
cimk[sumL[sumM[i] + m] + l, s] <- rbinom(1, 1, p_true[l, s])
}
}
} else {
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
cimk[sumL[sumM[i] + m] + l, s] <- rbinom(1, 1, q_true[l, s])
}
}
}
}
for (m in 1:M[i]) {
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
if(!(idx_sample %in% idx_nasample)){
if(cimk[sumL[sumM[i] + m] + l, s] == 1){
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
r_f1y(1, lambda1, size = size1)
} else {
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
r_f0y(1, pi0, lambda0, size0 = size0)
}
} else {
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
NA
}
}
}
idx_sample <- idx_sample + 1
}
}
}
OTU <- y
data_info <- data.frame(Site = rep(rep(rep(1:n, M), L), K),
Sample = rep(rep(1:N, L), K),
Primer = rep(1:N2, K),
X_psi = X_psi[rep(rep(rep(1:n, M), L), K),],
X_ord = X_ord[rep(rep(rep(1:n, M), L), K),],
X_theta = X_theta[rep(rep(1:N, L), K),-1])
data_info
View(data_info)
N2
max(L)
data_info <- data.frame(Site = rep(rep(rep(1:n, M), L), K),
Sample = rep(rep(1:N, L), K),
Primer = rep(1:max(L), K),
X_psi = X_psi[rep(rep(rep(1:n, M), L), K),],
X_ord = X_ord[rep(rep(rep(1:n, M), L), K),],
X_theta = X_theta[rep(rep(1:N, L), K),-1])
1:max(L)
rep(1, K)
data_info <- data.frame(Site = rep(rep(rep(1:n, M), L), K),
Sample = rep(rep(1:N, L), K),
Primer = rep(1:max(L), each = K),
X_psi = X_psi[rep(rep(rep(1:n, M), L), K),],
X_ord = X_ord[rep(rep(rep(1:n, M), L), K),],
X_theta = X_theta[rep(rep(1:N, L), K),-1])
K
str(K)
rep(1:max(L), K)
rep(1, K)
data_info <- data.frame(Site = rep(rep(rep(1:n, M), L), K),
Sample = rep(rep(1:N, L), K),
Primer = unlist(lapply(K, function(x) rep(1:max(L), x))),
X_psi = X_psi[rep(rep(rep(1:n, M), L), K),],
X_ord = X_ord[rep(rep(rep(1:n, M), L), K),],
X_theta = X_theta[rep(rep(1:N, L), K),-1])
data <- list(info = data_info,
OTU = OTU)
View(data$info)
# param count distr
{
lambda0 <- exp(2.5)
lambda1 <- exp(5)
size0 <- 3
size1 <- 3
pi0 <- .95
}
r_f0y <- function(n, pi0, lambda0, size0){
rbinom(n, size = 1, prob = 1 - pi0) * rnbinom(n, mu = lambda0, size = size0)
}
r_f1y <- function(n, lambda1, size1){
rnbinom(n, size = size1, mu = lambda1)
}
# settings
{
n <- 100
S <- 50
M <- rep(3, n)
N <- sum(M)
L <- rep(3, N)
N2 <- sum(L)
K <- rep(2, N2)
N3 <- sum(K)
sumM <- c(0, cumsum(M)[-n])
sumL <- c(0, cumsum(L)[-N])
sumK <- c(0, cumsum(K)[-N2])
rep(rep(rep(1:n, M), L), K)
ncov_psi <- 0
ncov_theta <- 1
ncov_ord <- 0
X_psi <- matrix(rnorm(n * ncov_psi), n, ncov_psi)
X_theta <- cbind(1, matrix(rnorm(N * (ncov_theta - 1)), N, ncov_theta - 1))
X_ord <- matrix(rnorm(n * ncov_ord), n, ncov_ord)
# na samples
idx_nasample <- sample(1:N, N * .01, replace = T)
}
d <- 5
logistic <- function(x) 1 / (1 + exp(-x))
beta0_psi_true <- rnorm(S, sd = .001)
beta_psi_true <- matrix(sample(c(-1,1), ncov_psi * S, replace = T), ncov_psi, S)
# beta_psi_true <- matrix(rnorm(ncov_psi * S), ncov_psi, S)
# beta_theta_true <- matrix(rnorm(ncov_theta * S), ncov_theta, S)
beta_theta_true <- rbind(1,
matrix(sample(c(-1,1), (ncov_theta - 1) * S, replace = T),
(ncov_theta - 1), S))
beta_ord_true <- matrix(sample(c(-1,1,0), ncov_ord * d, replace = T), ncov_ord, d)
E_true <- matrix(rnorm(n * d, sd = .5), n, d)
U_true <- X_ord %*% beta_ord_true + E_true
L_true <- matrix(rnorm(d * S), d, S)
psi_true <- logistic(matrix(beta0_psi_true, n, S, byrow = T) +
X_psi %*% beta_psi_true + U_true %*% L_true)
theta_true <- logistic(X_theta %*% beta_theta_true)
theta0_true <- rep(0.01, S)
p_true <- matrix(.9, max(L), S)
q_true <- matrix(.02, max(L), S)
z <- matrix(0, n, S)
delta <- matrix(0, N, S)
cimk <- matrix(0, N3, S)
y <- matrix(NA, N3, S)
for (s in 1:S) {
idx_sample <- 1
for (i in 1:n) {
z[i,s] <- rbinom(1, 1, prob = psi_true[i,s])
if(z[i,s] == 1){
for (m in 1:M[i]) {
delta[sumM[i] + m, s] <- rbinom(1, 1, theta_true[sumM[i] + m, s])
}
} else {
for (m in 1:M[i]) {
delta[sumM[i] + m, s] <- rbinom(1, 1, theta0_true[s])
}
}
for (m in 1:M[i]) {
if(delta[sumM[i] + m, s] == 1){
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
cimk[sumL[sumM[i] + m] + l, s] <- rbinom(1, 1, p_true[l, s])
}
}
} else {
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
cimk[sumL[sumM[i] + m] + l, s] <- rbinom(1, 1, q_true[l, s])
}
}
}
}
for (m in 1:M[i]) {
for(l in 1:L[sumM[i] + m]){
for(k in 1:K[sumL[sumM[i] + m] + l]){
if(!(idx_sample %in% idx_nasample)){
if(cimk[sumL[sumM[i] + m] + l, s] == 1){
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
r_f1y(1, lambda1, size = size1)
} else {
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
r_f0y(1, pi0, lambda0, size0 = size0)
}
} else {
y[sumK[sumL[sumM[i] + m] + l] + k, s] <-
NA
}
}
}
idx_sample <- idx_sample + 1
}
}
}
OTU <- y
data_info <- data.frame(Site = rep(rep(rep(1:n, M), L), K),
Sample = rep(rep(1:N, L), K),
Primer = unlist(lapply(K, function(x) rep(1:max(L), x))),
X_psi = X_psi[rep(rep(rep(1:n, M), L), K),],
X_ord = X_ord[rep(rep(rep(1:n, M), L), K),],
X_theta = X_theta[rep(rep(1:N, L), K),-1])
data <- list(info = data_info,
OTU = OTU)
View(data$info)
N2
rep(1:max(L), K)
