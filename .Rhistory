covName = "longitude") + ylim(c(-2,2))
plotOrdinationCovariates(fit_gailagongshan,
covName = "tributary") + ylim(c(-2,2))
str(plotOrdinationCovariates)
debug(plotOrdinationCovariates)
plotOrdinationCovariates(fit_gailagongshan,
covName = "tributary") + ylim(c(-2,2))
samples_subset
samples_subset <- matrix_of_draws[, grepl(param, colnames(matrix_of_draws))]
str(samples_subset)
idxcov + 0:(d - 1) *
ncov_ord
idxcov
covName
ordCovNames
plotOrdinationCovariates(fit_gailagongshan,
covName = "tributaryyes") + ylim(c(-2,2))
undebug(plotOrdinationCovariates)
plotOrdinationCovariates(fit_gailagongshan,
covName = "tributaryyes") + ylim(c(-2,2))
plotOrdinationCovariates(fit_gailagongshan,
covName = "tributaryyes") #+ ylim(c(-2,2))
plotReadIntensity(fit_gailagongshan)
fitmodel <- fit_gailagongshan
matrix_of_draws <- fitmodel$matrix_of_draws
mu1_output <-
matrix_of_draws[,grepl("mu1", colnames(matrix_of_draws))]
sigma0_output <-
matrix_of_draws[,grepl("sigma0", colnames(matrix_of_draws))]
sigma1_output <-
matrix_of_draws[,grepl("sigma1", colnames(matrix_of_draws))]
iter <- 1
niter <- length(mu1_output)
x_grid <- seq(1, fitmodel$infos$maxexplogy1, by = 5)
x <- log(x_grid + 1)
densities_plot_pos <- matrix(NA, length(x_grid), niter)
densities_plot_neg <- matrix(NA, length(x_grid), niter)
for (iter in 1:niter) {
mu1 <- mu1_output[iter]
sigma1 <- sigma1_output[iter]
sigma0 <- sigma0_output[iter]
densities_plot_pos[,iter] <- dnorm(x, mean = mu1, sd = sigma1)
densities_plot_neg[,iter] <- dnorm(x, mean = 0, sd = sigma0)
# Create data frame with both densities
# df <- data.frame(
#   x = x,
#   Density0 = ,
#   Density1 = dnorm(x, mean = mu1, sd = sigma1)
# )
# Plot using ggplot2
# ggplot(df) +
#   geom_line(aes(x = x, y = Density0, color = "N(0, σ₀²)"), linewidth = 1) +
#   geom_line(aes(x = x, y = Density1, color = "N(μ₁, σ₁²)"), linewidth = 1) +
#   scale_color_manual(values = c("N(0, σ₀²)" = "blue", "N(μ₁, σ₁²)" = "red"),
#                      name = "Distribution") +
#   labs(title = "Comparison of Two Normal Distributions",
#        x = "Value",
#        y = "Density") +
#   theme_minimal() +
#   scale_x_continuous(
#     name = "x",
#     breaks = x,  # Custom breaks (e.g., e⁻², e⁻¹, e⁰, e¹, ...)
#     labels = function(x) sprintf("%.2f", exp(x - 1))  # Format labels
#   )
}
for (iter in 1:niter) {
print(iter)
mu1 <- mu1_output[iter]
sigma1 <- sigma1_output[iter]
sigma0 <- sigma0_output[iter]
densities_plot_pos[,iter] <- dnorm(x, mean = mu1, sd = sigma1)
densities_plot_neg[,iter] <- dnorm(x, mean = 0, sd = sigma0)
# Create data frame with both densities
# df <- data.frame(
#   x = x,
#   Density0 = ,
#   Density1 = dnorm(x, mean = mu1, sd = sigma1)
# )
# Plot using ggplot2
# ggplot(df) +
#   geom_line(aes(x = x, y = Density0, color = "N(0, σ₀²)"), linewidth = 1) +
#   geom_line(aes(x = x, y = Density1, color = "N(μ₁, σ₁²)"), linewidth = 1) +
#   scale_color_manual(values = c("N(0, σ₀²)" = "blue", "N(μ₁, σ₁²)" = "red"),
#                      name = "Distribution") +
#   labs(title = "Comparison of Two Normal Distributions",
#        x = "Value",
#        y = "Density") +
#   theme_minimal() +
#   scale_x_continuous(
#     name = "x",
#     breaks = x,  # Custom breaks (e.g., e⁻², e⁻¹, e⁰, e¹, ...)
#     labels = function(x) sprintf("%.2f", exp(x - 1))  # Format labels
#   )
}
# print(iter)
mu1 <- mu1_output[iter]
sigma1 <- sigma1_output[iter]
sigma0 <- sigma0_output[iter]
densities_plot_pos[,iter] <- dnorm(x, mean = mu1, sd = sigma1)
densities_plot_neg[,iter] <- dnorm(x, mean = 0, sd = sigma0)
x
fitmodel$infos$maxexplogy1
x_grid <- seq(1, fitmodel$infos$maxexplogy1, by = 5)
x <- log(x_grid + 1)
x
x_grid <- exp(seq(log(1), log(fitmodel$infos$maxexplogy1), length.out = 1000))
x_grid
round(x_grid)
# x_grid <- seq(1, fitmodel$infos$maxexplogy1, by = 5)
x_grid <- exp(seq(log(1), log(fitmodel$infos$maxexplogy1), length.out = 1000))
x <- log(x_grid + 1)
densities_plot_pos <- matrix(NA, length(x_grid), niter)
densities_plot_neg <- matrix(NA, length(x_grid), niter)
for (iter in 1:niter) {
# print(iter)
mu1 <- mu1_output[iter]
sigma1 <- sigma1_output[iter]
sigma0 <- sigma0_output[iter]
densities_plot_pos[,iter] <- dnorm(x, mean = mu1, sd = sigma1)
densities_plot_neg[,iter] <- dnorm(x, mean = 0, sd = sigma0)
# Create data frame with both densities
# df <- data.frame(
#   x = x,
#   Density0 = ,
#   Density1 = dnorm(x, mean = mu1, sd = sigma1)
# )
# Plot using ggplot2
# ggplot(df) +
#   geom_line(aes(x = x, y = Density0, color = "N(0, σ₀²)"), linewidth = 1) +
#   geom_line(aes(x = x, y = Density1, color = "N(μ₁, σ₁²)"), linewidth = 1) +
#   scale_color_manual(values = c("N(0, σ₀²)" = "blue", "N(μ₁, σ₁²)" = "red"),
#                      name = "Distribution") +
#   labs(title = "Comparison of Two Normal Distributions",
#        x = "Value",
#        y = "Density") +
#   theme_minimal() +
#   scale_x_continuous(
#     name = "x",
#     breaks = x,  # Custom breaks (e.g., e⁻², e⁻¹, e⁰, e¹, ...)
#     labels = function(x) sprintf("%.2f", exp(x - 1))  # Format labels
#   )
}
df0 <- as_tibble(densities_plot_neg) %>%
mutate(x = x_grid) %>%
pivot_longer(cols = -x, names_to = "iter", values_to = "density") %>%
mutate(Type = "False positives")
df1 <- as_tibble(densities_plot_pos) %>%
mutate(x = x_grid) %>%
pivot_longer(cols = -x, names_to = "iter", values_to = "density") %>%
mutate(Type = "True positives")
# Combine into one data frame
df_combined <- bind_rows(df0, df1) %>%
mutate(iter = as.numeric(gsub("V", "", iter)))  # Clean iteration labels
x_grid_breaks <- c(0, 10, 20,
x_grid[seq(1, length(x_grid), by = 20)] - 1)
ggplot(df_combined, aes(x = x, y = density, group = interaction(iter, Type), color = Type)) +
geom_line(alpha = 0.3, aes(color = Type)) +
scale_color_manual(values = c("False positives" = "blue", "True positives" = "red")) +
labs(title = "Reads distributions",
x = "x", y = "Density") +
theme_minimal() +
scale_x_continuous(
name = "x",
breaks = x_grid_breaks,  # Custom breaks (e.g., e⁻², e⁻¹, e⁰, e¹, ...)
# labels = function(x) sprintf("%.2f", exp(x) - 1)  # Format labels
trans = "log"
) +
theme(axis.text.x = element_text(angle = 90))
x_grid_breaks <- round( c(0, 10, 20,
x_grid[seq(1, length(x_grid), by = 20)] - 1))
ggplot(df_combined, aes(x = x, y = density, group = interaction(iter, Type), color = Type)) +
geom_line(alpha = 0.3, aes(color = Type)) +
scale_color_manual(values = c("False positives" = "blue", "True positives" = "red")) +
labs(title = "Reads distributions",
x = "x", y = "Density") +
theme_minimal() +
scale_x_continuous(
name = "x",
breaks = x_grid_breaks,  # Custom breaks (e.g., e⁻², e⁻¹, e⁰, e¹, ...)
# labels = function(x) sprintf("%.2f", exp(x) - 1)  # Format labels
trans = "log"
) +
theme(axis.text.x = element_text(angle = 90))
fit_gailagongshan <- runOccPlus(data,
d = 10,
occCovariates = c(),
detCovariates = c("DayRain","PrevDayRain"),
ordCovariates = c("latitude","longitude","tributary"))
load("C:/Users/Alex/Downloads/fitmodel.rda")
load("C:/Users/Alex/Downloads/fitmodel (1).rda")
load("C:/Users/Alex/Downloads/fitmodel (2).rda")
data <- readRDS("C:/Users/Alex/Downloads/fitmodel (2).rda")
fitmodel <- data
str(fitmodel$X_theta)
library(occPlus)
install.packages("rstan")
fitmodel <- readRDS("C:/Users/Alex/Downloads/fitmodel (2).rda")
warnings()
plotDetectionCovariates
plotDetectionCovariates(fitmodel,
covName = "typeW")
load("~/occPlus/dev/gailagongshan_occplus.rda")
source("~/occPlus/R/output.R", echo=TRUE)
plotOccupancyRates(fitmodel)
load("~/occPlus/dev/gailagongshan_occplus.rda")
load("~/occPlus/dev/fitmodel_gailagongshan.rda")
plotOccupancyRates(fitmodel)
library(occPlus)
plotOccupancyRates(fitmodel)
plotDetectionRates(fitmodel)
plotCollectionRates(fitmodel)
matrix_of_draws <- fitmodel$matrix_of_draws
S <- fitmodel$infos$S
# ncov_theta <- fitmodel$infos$ncov_psi
speciesNames <- fitmodel$infos$speciesNames
primerNames <- fitmodel$infos$primerNames
if(is.null(idx_species)){
idx_species <- 1:S
}
idx_species <- 1:S
param <- "theta0\\["
samples_subset <- matrix_of_draws[,grepl(param, colnames(matrix_of_draws))]
data_plot <- apply(samples_subset, 2, function(x) {
quantile(x, probs = c(0.025, 0.975))
}) %>%
t %>%
as.data.frame
texts <- rownames(data_plot)
str(data_plot)
rownames(data_plot)
texts <- rownames(data_plot)
data_plot <- apply(samples_subset, 2, function(x) {
quantile(x, probs = c(0.025, 0.975))
}) %>%
t %>%
as.data.frame
data_plot <- data_plot %>%
mutate(Species = speciesNames) %>%
mutate(speciesOrder = order(`2.5%`)) %>%
filter(Species %in% speciesNames[idx_species])
orderSpecies <- order(data_plot$`2.5%`)
detectionRates <- data_plot %>%
ggplot(aes(x =  factor(Species, level = speciesNames[orderSpecies]),
ymin = `2.5%`,
ymax = `97.5%`,
color = factor(Primer))) + geom_errorbar() +
xlab("Species") +
# ylim(c(0,1)) +
ggtitle("False positives rates") +
theme_bw() +
# ylim(c(0,1)) +
ylab("") +
theme(
axis.text = element_text(angle = 90,
size = 8),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = .5,
size = 15)
)
detectionRates
detectionRates <- data_plot %>%
ggplot(aes(x =  factor(Species, level = speciesNames[orderSpecies]),
ymin = `2.5%`,
ymax = `97.5%`)) + geom_errorbar() +
xlab("Species") +
# ylim(c(0,1)) +
ggtitle("False positives rates") +
theme_bw() +
# ylim(c(0,1)) +
ylab("") +
theme(
axis.text = element_text(angle = 90,
size = 8),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = .5,
size = 15)
)
detectionRates
source("~/occPlus/R/output.R", echo=TRUE)
plotCollectionRates(fitmodel)
detectionRates
source("~/occPlus/R/output.R", echo=TRUE)
plotStage1FPRates(fitmodel)
plotDetectionRates(fitmodel)
plotFPStage2DetectionRates(fitmodel)
plotDetectionRates(fitmodel)
plotFPStage2DetectionRates(fitmodel)
plotDetectionRates(fitmodel)
matrix_of_draws <- fitmodel$matrix_of_draws
S <- fitmodel$infos$S
# ncov_theta <- fitmodel$infos$ncov_psi
speciesNames <- fitmodel$infos$speciesNames
primerNames <- fitmodel$infos$primerNames
if(is.null(idx_species)){
idx_species <- 1:S
}
param <- "q\\["
samples_subset <- matrix_of_draws[,grepl(param, colnames(matrix_of_draws))]
data_plot <- apply(samples_subset, 2, function(x) {
quantile(x, probs = c(0.025, 0.975))
}) %>%
t %>%
as.data.frame
texts <- rownames(data_plot)
idx_speciesprimer <- str_match(texts, "\\[(\\d+),(\\d+)\\]")
data_plot <- data_plot %>%
mutate(Species = as.numeric(idx_speciesprimer[,3]),
Primer = as.numeric(idx_speciesprimer[,2])) %>%
mutate(Species = speciesNames[Species],
Primer = primerNames[Primer]) %>%
mutate(speciesOrder = order(`2.5%`)) %>%
filter(Species %in% speciesNames[idx_species])
orderSpecies <- order(data_plot$`2.5%`[data_plot$Primer == data_plot$Primer[1]])
detectionRates <- data_plot %>%
ggplot(aes(x =  factor(Species, level = speciesNames[orderSpecies]),
ymin = `2.5%`,
ymax = `97.5%`,
color = factor(Primer))) + geom_errorbar() +
xlab("Species") +
# ylim(c(0,1)) +
ggtitle("Detection rates") +
theme_bw() +
# ylim(c(0,1)) +
ylab("p") +
theme(
axis.text = element_text(angle = 90,
size = 8),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = .5,
size = 15)
)
detectionRates
plotCollectionRates(fitmodel)
plotStage1FPRates(fitmodel)
plotDetectionRates(fitmodel)
plotFPStage2DetectionRates(fitmodel)
plotCollectionRates(fitmodel)
plotStage1FPRates(fitmodel)
source("~/occPlus/R/runOccPlus.R", echo=TRUE)
plotCovarianceMatrix(fitmodel,
idx_species = 1:S)
library(ggcorrplot)
plotCovarianceMatrix(fitmodel,
idx_species = 1:S)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:10)
source("~/occPlus/R/output.R", echo=TRUE)
plotCovarianceMatrix(fitmodel,
idx_species = 1:S)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:10)
plotCovarianceMatrix(fitmodel,
idx_species = 1:S)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:10)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:S)
plotCovarianceMatrix(fitmodel,
idx_species = 1:S)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:S)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:20)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:25)
plotDetectionCovariates(fitmodel, covName = "DayRain")
plotDetectionCovariates(fitmodel, covName = "PrevDayRain")
plotOccupancyRates(fitmodel)
plotOccupancyRates(fitmodel) + ylim(c(0,1))
plotOccupancyRates(fitmodel) + ylim(c(0,1))
load("~/occPlus/dev/fitmodel_gailagongshan.rda")
Lambda_output <- generateCovarianceMatrixOutput(fitmodel, idx_species)
Lambda_quantiles <- apply(Lambda_output, c(2,3),
function(x){quantile(x, probs = c(0.025, 0.5, 0.975))})
if(is.null(idx_species)){
idx_species <- 1:S
}
Lambda_indexes <- which(Lambda_quantiles[3,,] < 0 |
Lambda_quantiles[1,,] > 0, arr.ind = T)
Lambda_output <- generateCovarianceMatrixOutput(fitmodel, idx_species)
Lambda_quantiles <- apply(Lambda_output, c(2,3),
function(x){quantile(x, probs = c(0.025, 0.5, 0.975))})
if(is.null(idx_species)){
idx_species <- 1:S
}
Lambda_indexes_possign <- which(Lambda_quantiles[1,,] > 0, arr.ind = T)
Lambda_indexes_negsign <- which(Lambda_quantiles[3,,] < 0, arr.ind = T)
Lambda_sign <- matrix(0, length(idx_species), length(idx_species))
Lambda_sign[Lambda_indexes_possign] <- 1
Lambda_sign[Lambda_indexes_negsign] <- -1
rownames(Lambda_sign) <- fitmodel$infos$speciesNames[idx_species]
colnames(Lambda_sign) <- rownames(Lambda_sign)
ggcorrplot(
# Lambda_quantiles[2,,],
Lambda_sign,
method = "square", type = "lower",
lab = F, lab_size = 3, insig = "blank",
colors = c("blue", "white", "red"),
title = "Significant correlations") +
theme(plot.title = element_text(hjust = 0.5,
size = 16,
face = "bold")) +
theme(legend.position = "none") + theme(
axis.text.x = element_blank(),  # Remove x-axis labels
axis.text.y = element_blank()   # Remove y-axis labels
)
ggcorrplot(
# Lambda_quantiles[2,,],
Lambda_sign,
method = "square", type = "lower",
lab = F, lab_size = 3, insig = "blank",
colors = c("blue", "white", "red"),
title = "Significant correlations") +
theme(plot.title = element_text(hjust = 0.5,
size = 16,
face = "bold")) +
theme(legend.position = "none") + theme(
axis.text.x = element_blank(),  # Remove x-axis labels
axis.text.y = element_blank()   # Remove y-axis labels
)
ggcorrplot(
# Lambda_quantiles[2,,],
Lambda_sign,
method = "square", type = "lower",
lab = F, lab_size = 3, insig = "blank",
colors = c("blue", "white", "red"),
title = "Significant correlations") +
theme(plot.title = element_text(hjust = 0.5,
size = 16,
face = "bold")) +
theme(legend.position = "none") #+ theme(
source("~/occPlus/R/output.R", echo=TRUE)
plotSigElementsCovMatrix(fitmodel,
idx_species = 1:25)
plotSigElementsCovMatrix(fitmodel,
idx_species = 25:50)
load("~/occPlus/dev/gailagongshan_occplus.rda")
library(tidyverse)
data <- read.table("OTUtable_12S_toSP_GLG23_20240528.txt", header = T) %>%
arrange(site, Rep_of_sample) %>%
filter(status == "sample")
setwd("C:/Users/Alex/Downloads")
library(tidyverse)
data <- read.table("OTUtable_12S_toSP_GLG23_20240528.txt", header = T) %>%
arrange(site, Rep_of_sample) %>%
filter(status == "sample")
OTU <- data[,24:421]
colnames(data)
data <- read.table("OTUtable_12S_toSP_GLG23_20240528.txt", header = T) %>%
arrange(site, Rep_of_sample) %>%
filter(status == "sample")
colnames(data)
data$Regional_Division
table(data$Regional_Division)
data$DistFromPAedge
str(data)
devtools::documnet()
devtools::document()
setwd("~/occPlus")
devtools::document()
devtools::load_all(".")
tempdir()  # Check current temp path
unlink(tempdir(), recursive = TRUE)  #
library(tidyverse)
data <- read.table("OTUtable_12S_toSP_GLG23_20240528.txt", header = T) %>%
arrange(site, Rep_of_sample) %>%
filter(status == "sample") %>%
mutate(
riverOrigin = case_when(
is.na(DistFromPAedge) ~ "outsideGLGS",
TRUE ~ "insideGLGS")
)
vignette("vignette")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
library(occPlus)
unlink("C:/Users/Alex/AppData/Local/R/win-library/4.4/occPlus", recursive = TRUE)
library(tidyverse)
data <- read.table("OTUtable_12S_toSP_GLG23_20240528.txt", header = T) %>%
arrange(site, Rep_of_sample) %>%
filter(status == "sample") %>%
mutate(
riverOrigin = case_when(
is.na(DistFromPAedge) ~ "outsideGLGS",
TRUE ~ "insideGLGS")
)
setwd("C:/Users/Alex/Downloads")
library(tidyverse)
data <- read.table("OTUtable_12S_toSP_GLG23_20240528.txt", header = T) %>%
arrange(site, Rep_of_sample) %>%
filter(status == "sample") %>%
mutate(
riverOrigin = case_when(
is.na(DistFromPAedge) ~ "outsideGLGS",
TRUE ~ "insideGLGS")
)
OTU <- data[,24:421]
datainfo <- data[,-c(24:421)] %>%
mutate(Primer = 1) %>%
select(site, SampleID, Primer, Filter_vol, latitude, longitude,
tributary, DayRain, PrevDayRain, riverOrigin) %>%
rename(Site = site,
Sample = SampleID)
OTU <- OTU %>%
select(starts_with("Actinopteri"), starts_with("Teleostei"))
data <- list(info = datainfo,
OTU = OTU)
fitmodel <- runOccPlus(data,
d = 10,
occCovariates = c(),
detCovariates = c("DayRain","PrevDayRain"),
ordCovariates = c("latitude","longitude","riverOrigin"))
